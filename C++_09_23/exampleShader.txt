
float DrawCircle(vec2 uv, vec2 position, float radius, float aspect) {
    position.x *= aspect;
    
    float distFromCircle = length(uv - position);    
    
        float colorValue = distFromCircle < radius ? 1.0 : 0.;
    
    return colorValue;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
#define PI 3.14159265359

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //uv -= vec2(.5, .5);
    
    float aspect = iResolution.x / iResolution.y;
    
    uv.x *= aspect;
    
    float t = iTime;
    
    float sinTime = sin(t) * .5 + .5;
    float cosTime = cos(t) * .5 + .5;
    
    float offset = 1.;
    float offsetSinTime = sin(t + offset) * .5 + .5;   
    
    vec3 white = vec3(1.0, 1.0, 1.0);
    vec3 red = vec3(1.0, 0., 0.);
    
    //float colorValue = sin(uv.x*PI);
    
    float colorValue = 0.0;
   
    float remaining = mod(t, 1.);
    
    vec3 overlapColor = vec3(.8, 0., .2);
    
    //circle
    vec2 circlePos = vec2(.25 + sinTime*.5, .25 + cosTime*.5);
    vec2 circlePos2 = vec2(.75 - sinTime*.5, .75 - cosTime*.5);
    
    float radius = .10;
    colorValue += DrawCircle(uv, circlePos, radius * (1.0 + sinTime), aspect);
    colorValue += DrawCircle(uv, circlePos2, radius * (1.0 + offsetSinTime), aspect);
    
        vec3 col = vec3(colorValue, colorValue, colorValue);

    if (colorValue > 1.0) {
        col = overlapColor;
    }

    
    //remaining /= 2.;
    //0-1
   
    //col = vec3(1.0, 1.0 - sinTime, 1.0 - sinTime);
   




    // Output to screen
    fragColor = vec4(col,1.0);
}